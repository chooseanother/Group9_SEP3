@page "/match/{id:int}"
@using Group9_SEP3_Chess.Models
@using Group9_SEP3_Chess.Data
@using System.Text.Json
@inject IMatchService _matchService
@inject AuthenticationStateProvider _authenticationStateProvider
<div class="row">
    <div class="col">
        <div class="RemovedPiecesTable">
            <h4>Black Score: @BlackScore</h4>
            <h4>White removed: </h4>
            <div class="row">
                @foreach (ChessPiece chessPiece in WhiteRemovedChessPieces)
                {
                    <div class="col-md-2">
                        <img style="width: 50px; height:50px " src="@chessPiece.GetPiece()">
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col">
        <div class="board">
            @for (int i = 0; i < chessPieces.GetLength(0); i++)
            {
                if (i % 2 == 0)
                {
                    for (int j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        int verticalaxis = i;
                        int horizontalaxis = j;
                        if (chessPieces[i, j] != null)
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                            else
                            {
                                <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                        }
                        else
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareWhite ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                            else
                            {
                                <BoardSquareBlack ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                        }
                    }
                }
                else
                {
                    for (int j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        int verticalaxis = i;
                        int horizontalaxis = j;
                        if (chessPieces[i, j] != null)
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                            else
                            {
                                <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                        }
                        else
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareBlack ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                            else
                            {
                                <BoardSquareWhite ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                        }
                    }
                }
            }
        </div>
    </div>
    <div class="col">
        <div class="RemovedPiecesTable">
            <h4>White Score: @WhiteScore</h4>
            <h4>Black removed: </h4>
            <div class="row">
                @foreach (ChessPiece chessPiece in BlackRemovedChessPieces)
                {
                    <div class="col-md-2">
                        <img style="width: 50px; height:50px " src="@chessPiece.GetPiece()">
                    </div>
                }
            </div>
        </div>
    </div>
</div>


<div class="UpgradePart" style="text-align: center">
    <label>Select upgrade: </label>
    <select @bind="UpgradeSelected">
        <option>Rook</option>
        <option>Knight</option>
        <option>Bishop</option>
        <option>Queen</option>
    </select>
    <button class="btn btn-outline-dark" @onclick="UpgradeChessPiece">Upgrade</button>
</div>

<div class="MarkMatch" style="text-align: center">
    <label>Select match outcome: </label>
    <select @bind="Outcome">
        <option value="">Clear</option>
        <option>Win</option>
        <option>Loss</option>
        <option>Draw</option>
    </select>
    <button class="btn btn-outline-dark" @onclick="UpdateOutcome">Submit</button>
</div>

<style>
    .board {
        display: grid;
        grid-template-columns: auto auto auto auto auto auto auto auto;
        grid-template-rows: auto auto auto auto auto auto auto auto;
        background-color: #da9d1d;
        padding: 10px;
        width: 680px;
        height: 680px;
    }
    .RemovedPiecesTable{
       margin-top: 20px;
    }
   
</style>

@code {
    private ChessPiece[,] chessPieces = new ChessPiece[8, 8];
    private IList<ChessPiece> BlackRemovedChessPieces;
    private IList<ChessPiece> WhiteRemovedChessPieces;
    String printoutArray = "";
    String UpgradeSelected = "";
    String WhiteScore = "";
    String BlackScore = "";
    private string Outcome { get; set; }

    [Parameter]
    public int id { get; set; }

    private User loggedIn;

    protected override async Task OnInitializedAsync()
    {
        loggedIn = ((CustomAuthenticationStateProvider) _authenticationStateProvider).GetCachedUser();
        chessPieces = await _matchService.LoadChessPieces(new Message {Action = "Load", Data = JsonSerializer.Serialize(loggedIn), DataSlot2 = "" + id});
        WhiteRemovedChessPieces = _matchService.getWhiteRemovedChessPieces();
        BlackRemovedChessPieces = _matchService.getBlackRemovedChessPieces();
        BlackScore = _matchService.getMatchScores(true);
        WhiteScore = _matchService.getMatchScores(false);
    }

    private async Task UpdateOutcome()
    {
        await _matchService.UpdateOutcome(loggedIn.Username, Outcome, 1);
    }

    private async Task HandleClick(int FirstLayer, int SecondLayer)
    {
        ChessPiece selected = null;
        for (int i = 0; i < chessPieces.GetLength(0); i++)
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                if (chessPieces[i, j] != null && chessPieces[i, j].Selected && selected == null)
                {
                    selected = chessPieces[i, j];
                    if (selected.NewPosition == null)
                    {
                        selected.OldPosition = new Position()
                        {
                            VerticalAxis = i,
                            HorizontalAxis = j
                        };
                        selected.NewPosition = new Position()
                        {
                            VerticalAxis = FirstLayer,
                            HorizontalAxis = SecondLayer
                        };
                    }
                    else
                    {
                        selected.OldPosition = chessPieces[i, j].NewPosition;
                        selected.NewPosition = new Position()
                        {
                            VerticalAxis = FirstLayer,
                            HorizontalAxis = SecondLayer
                        };
                    }
                }
            }
        }
        if (chessPieces[FirstLayer, SecondLayer] != null)
        {
            chessPieces[FirstLayer, SecondLayer].Selected = true;
            Console.WriteLine($"Selected {chessPieces[FirstLayer, SecondLayer].Type} {chessPieces[FirstLayer, SecondLayer].Color}");
        }
        if (selected != null && selected.OldPosition.VerticalAxis == FirstLayer && selected.OldPosition.HorizontalAxis == SecondLayer)
        {
            chessPieces[FirstLayer, SecondLayer].Selected = false;
            Console.WriteLine($"Deselected{selected.Type} {selected.Color}");
            selected = null;
        }
        if (selected != null)
        {
            Message message = new Message()
            {
                Data = JsonSerializer.Serialize(selected),
                Action = "Move"
            };
            ChessPiece moved = await _matchService.MoveChessPiece(message);
    //Console.WriteLine($"moved to{FirstLayer} {SecondLayer}");
            if (moved != null)
            {
                Console.WriteLine($"Chess piece moved: {moved.Color} {moved.Type} {moved.OldPosition} {moved.NewPosition}");
                WhiteRemovedChessPieces = _matchService.getWhiteRemovedChessPieces();
                BlackRemovedChessPieces = _matchService.getBlackRemovedChessPieces();
                BlackScore = _matchService.getMatchScores(true);
                WhiteScore = _matchService.getMatchScores(false);
                chessPieces[FirstLayer, SecondLayer] = moved;
                if (chessPieces[FirstLayer, SecondLayer].OldPosition.VerticalAxis != chessPieces[FirstLayer, SecondLayer].NewPosition.VerticalAxis
                    || chessPieces[FirstLayer, SecondLayer].OldPosition.HorizontalAxis != chessPieces[FirstLayer, SecondLayer].NewPosition.HorizontalAxis)
                {
                    chessPieces[moved.OldPosition.VerticalAxis, moved.OldPosition.HorizontalAxis] = null;
                }
                for (int i = 0; i < chessPieces.GetLength(0); i++)
                {
                    for (int j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        if (chessPieces[i, j] != null)
                        {
                            chessPieces[i, j].Selected = false;
                        }
                    }
                }
            }
            else
            {
                chessPieces[selected.OldPosition.VerticalAxis, selected.OldPosition.HorizontalAxis].NewPosition = selected.OldPosition;
                Console.WriteLine("Deselecting all pieces");
                for (int i = 0; i < chessPieces.GetLength(0); i++)
                {
                    for (int j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        if (chessPieces[i, j] != null)
                        {
                            chessPieces[i, j].Selected = false;
                        }
                    }
                }
            }
        }
    }

    private async Task UpgradeChessPiece()
    {
        ChessPiece selected = null;
        for (int i = 0; i < chessPieces.GetLength(0); i++)
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                if (chessPieces[i, j] != null && chessPieces[i, j].Selected)
                {
                    selected = chessPieces[i, j];
                    selected.Selected = false;
                    selected.OldPosition = new Position()
                    {
                        VerticalAxis = i,
                        HorizontalAxis = j
                    };
                    selected.NewPosition = new Position()
                    {
                        VerticalAxis = i,
                        HorizontalAxis = j
                    };
                }
            }
        }

        Message message = new Message()
        {
            Action = "Upgrade",
            Data = UpgradeSelected,
            DataSlot2 = JsonSerializer.Serialize(selected)
        };
        ChessPiece toUpdate = await _matchService.UpgradeChessPiece(message);
        if (toUpdate != null)
        {
            chessPieces[toUpdate.OldPosition.VerticalAxis, toUpdate.OldPosition.HorizontalAxis] = toUpdate;
        }
    }
}
