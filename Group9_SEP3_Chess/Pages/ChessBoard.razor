@using Group9_SEP3_Chess.Models

<div class="board">
    @for (int i = 0; i < chessPieces.GetLength(0); i++)
    {
        if (i % 2 == 0)
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                int verticalaxis = i;
                int horizontalaxis = j;
                if (chessPieces[i, j] != null)
                {
                    if (j % 2 == 0)
                    {
                        <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                    }
                    else
                    {
                        <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                    }
                }
                else
                {
                    if (j % 2 == 0)
                    {
                        <BoardSquareWhite ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                    }
                    else
                    {
                        <BoardSquareBlack ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                    }
                }
            }
        }
        else
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                int verticalaxis = i;
                int horizontalaxis = j;
                if (chessPieces[i, j] != null)
                {
                    if (j % 2 == 0)
                    {
                        <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                    }
                    else
                    {
                        <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                    }
                }
                else
                {
                    if (j % 2 == 0)
                    {
                        <BoardSquareBlack ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                    }
                    else
                    {
                        <BoardSquareWhite ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                    }
                }
            }
        }
    }
</div>
<div class="UpgradePart">
    <label>Select upgrade: </label>
    <select @bind="UpgradeSelected">
        <option>rook</option>
        <option>horse</option>
        <option>bishop</option>
        <option>queen</option>
    </select>

    <button class="btn btn-outline-dark" @onclick="UpdateChessPiece">Upgrade</button>
</div>

<style>
    .board {
        display: grid;
        grid-template-columns: auto auto auto auto auto auto auto auto;
        grid-template-rows: auto auto auto auto auto auto auto auto;
        background-color: #da9d1d;
        padding: 10px;
        width: 680px;
        height: 680px;
    }
   
</style>

@code {
    private String[] letters = new String[8] {"a", "b", "c", "d", "e", "f", "g", "h"};
    private ChessPiece[,] chessPieces = new ChessPiece[8, 8];
    String printoutArray = "";
    String UpgradeSelected = "";

    protected override async Task OnInitializedAsync()
    {
        chessPieces[0, 0] = new ChessPiece()
        {
            Type = "black-rook"
        };
        chessPieces[0, 1] = new ChessPiece()
        {
            Type = "black-horse"
        };
        chessPieces[0, 2] = new ChessPiece()
        {
            Type = "black-bishop"
        };
        chessPieces[0, 3] = new ChessPiece()
        {
            Type = "black-queen"
        };
        chessPieces[0, 4] = new ChessPiece()
        {
            Type = "black-king"
        };
        chessPieces[0, 5] = new ChessPiece()
        {
            Type = "black-bishop"
        };
        chessPieces[0, 6] = new ChessPiece()
        {
            Type = "black-horse"
        };
        chessPieces[0, 7] = new ChessPiece()
        {
            Type = "black-rook"
        };

        for (int i = 0; i < chessPieces.GetLength(1); i++)
        {
            chessPieces[1, i] = new ChessPiece()
            {
                Type = "black-pawn"
            };
        }
        chessPieces[7, 0] = new ChessPiece()
        {
            Type = "white-rook"
        };
        chessPieces[7, 1] = new ChessPiece()
        {
            Type = "white-horse"
        };
        chessPieces[7, 2] = new ChessPiece()
        {
            Type = "white-bishop"
        };
        chessPieces[7, 3] = new ChessPiece()
        {
            Type = "white-queen"
        };
        chessPieces[7, 4] = new ChessPiece()
        {
            Type = "white-king"
        };
        chessPieces[7, 5] = new ChessPiece()
        {
            Type = "white-bishop"
        };
        chessPieces[7, 6] = new ChessPiece()
        {
            Type = "white-horse"
        };
        chessPieces[7, 7] = new ChessPiece()
        {
            Type = "white-rook"
        };
        for (int i = 0; i < chessPieces.GetLength(1); i++)
        {
            chessPieces[6, i] = new ChessPiece()
            {
                Type = "white-pawn"
            };
        }
    }

    private void HandleClick(int FirstLayer, int SecondLayer)
    {
        ChessPiece selected = null;
        
            
            for (int i = 0; i < chessPieces.GetLength(0); i++)
            {
                for (int j = 0; j < chessPieces.GetLength(1); j++)
                {
                    if (chessPieces[i, j] != null && chessPieces[i, j].Selected && selected == null)
                    {
                        if(chessPieces[i,j].NewPosition==null){
                            chessPieces[i, j].OldPosition = new Position()
                            {
                                VerticalAxis = i,
                                HorizontalAxis = j
                            };
                        }
                        else
                        {
                            chessPieces[i, j].OldPosition = chessPieces[i, j].NewPosition;
                        }
                        selected = chessPieces[i, j];
                        Console.WriteLine($"Chess piece:{selected.Type} was found to be selected");
                    }
                }
            }
        
            if (chessPieces[FirstLayer, SecondLayer] != null)
            {
                chessPieces[FirstLayer, SecondLayer].Selected = true;
                Console.WriteLine($"Chess piece:{chessPieces[FirstLayer,SecondLayer].Type} was selected");
            }
        Console.WriteLine("Here");
        if (selected != null)
        {
            chessPieces[FirstLayer, SecondLayer] = selected;
            chessPieces[FirstLayer, SecondLayer].NewPosition = new Position()
            {
                VerticalAxis = FirstLayer,
                HorizontalAxis = SecondLayer
            };
            Console.WriteLine($"Coordinates old: {selected.OldPosition.ToString()} Coordinates new: {chessPieces[FirstLayer,SecondLayer].NewPosition.ToString()}");
            if(selected.OldPosition.VerticalAxis!=chessPieces[FirstLayer,SecondLayer].NewPosition.VerticalAxis ||
               selected.OldPosition.HorizontalAxis!=chessPieces[FirstLayer,SecondLayer].NewPosition.HorizontalAxis){
                chessPieces[selected.OldPosition.VerticalAxis, selected.OldPosition.HorizontalAxis] = null;
            }
            for (int i = 0; i < chessPieces.GetLength(0); i++)
            {
                for (int j = 0; j < chessPieces.GetLength(1); j++)
                {
                    if(chessPieces[i,j]!=null){
                        chessPieces[i, j].Selected = false;
                    }
                }
            }
        }


    }


    private void UpdateChessPiece()
    {
        
        bool NoMultipleUpgrades = false;
        
        for (int i = 0; i < chessPieces.GetLength(0); i++)
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                if (chessPieces[i, j] != null && chessPieces[i, j].Selected && !NoMultipleUpgrades)
                {
                    if (chessPieces[i, j].Type.Contains("black"))
                    {
                        chessPieces[i, j].Type = "black-" + UpgradeSelected;
                        chessPieces[i, j].Selected = false;
                        NoMultipleUpgrades = true;
                    }
                    else
                    {
                        chessPieces[i, j].Type = "white-" + UpgradeSelected;
                        chessPieces[i, j].Selected = false;
                        NoMultipleUpgrades = true;
                    }
                    
                }
            }
        }
        
    }

}