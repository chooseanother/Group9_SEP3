@using Group9_SEP3_Chess.Models

<div class="board">
    @for (int i = 0; i < chessPieces.GetLength(0); i++)
    {
        if(i%2==0)
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                int verticalaxis = i;
                int horizontalaxis = j;
                if (chessPieces[i, j] != null)
                {
                    if (j % 2 == 0)
                    {
                        <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis,horizontalaxis))"/>
                    }
                    else
                    {
                        <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis,horizontalaxis))"/>
                    }
                }
                else
                {
                    if (j % 2 == 0)
                    {
                        <BoardSquareWhite ClickHandler="@(() => HandleClick(verticalaxis,horizontalaxis))"/>
                    }
                    else
                    {
                        <BoardSquareBlack ClickHandler="@(() => HandleClick(verticalaxis,horizontalaxis))"/>
                    }
                }
            }
        }
        else
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                int verticalaxis = i;
                int horizontalaxis = j;
                if (chessPieces[i, j] != null)
                {
                    if (j % 2 == 0)
                    {
                        <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis,horizontalaxis))"/>
                    }
                    else
                    {
                        <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis,horizontalaxis))"/>
                    }
                }
                else
                {
                    if (j % 2 == 0)
                    {
                        <BoardSquareBlack ClickHandler="@(() => HandleClick(verticalaxis,horizontalaxis))"/>
                    }
                    else
                    {
                        <BoardSquareWhite ClickHandler="@(() => HandleClick(verticalaxis,horizontalaxis))"/>
                    }
                }
            }
        }
    }
</div>


<style>
    .board {
        display: grid;
        grid-template-columns: auto auto auto auto auto auto auto auto;
        grid-template-rows: auto auto auto auto auto auto auto auto;
        background-color: #da9d1d;
        padding: 10px;
        width: 850px;
        height: 850px;
    }
   
</style>

@code {
    private String[] letters = new String[8] {"a", "b", "c", "d", "e", "f", "g", "h"};
    private ChessPiece[,] chessPieces = new ChessPiece[8, 8];
    String printoutArray = "";

    protected override async Task OnInitializedAsync()
    {
        chessPieces[0, 0] = new ChessPiece()
        {
            Type = "brook"
        };
        chessPieces[0, 1] = new ChessPiece()
        {
            Type = "bhorse"
        };
        chessPieces[0, 2] = new ChessPiece()
        {
            Type = "bbishop"
        };
        chessPieces[0, 3] = new ChessPiece()
        {
            Type = "bqueen"
        };
        chessPieces[0, 4] = new ChessPiece()
        {
            Type = "bking"
        };
        chessPieces[0, 5] = new ChessPiece()
        {
            Type = "bbishop"
        };
        chessPieces[0, 6] = new ChessPiece()
        {
            Type = "bhorse"
        };
        chessPieces[0, 7] = new ChessPiece()
        {
            Type = "brook"
        };

        for (int i = 0; i < chessPieces.GetLength(1); i++)
        {
            chessPieces[1, i] = new ChessPiece()
            {
                Type = "bpawn"
            };
        }
        chessPieces[7, 0] = new ChessPiece()
        {
            Type = "wrook"
        };
        chessPieces[7, 1] = new ChessPiece()
        {
            Type = "whorse"
        };
        chessPieces[7, 2] = new ChessPiece()
        {
            Type = "wbishop"
        };
        chessPieces[7, 3] = new ChessPiece()
        {
            Type = "wqueen"
        };
        chessPieces[7, 4] = new ChessPiece()
        {
            Type = "wking"
        };
        chessPieces[7, 5] = new ChessPiece()
        {
            Type = "wbishop"
        };
        chessPieces[7, 6] = new ChessPiece()
        {
            Type = "whorse"
        };
        chessPieces[7, 7] = new ChessPiece()
        {
            Type = "wrook"
        };
        for (int i = 0; i < chessPieces.GetLength(1); i++)
        {
            chessPieces[6, i] = new ChessPiece()
            {
                Type = "wpawn"
            };
        }
    }

    private void HandleClick(int FirstLayer,int SecondLayer)
    {
        if(chessPieces[FirstLayer,SecondLayer]!=null && !chessPieces[FirstLayer,SecondLayer].Selected)
        {
            chessPieces[FirstLayer, SecondLayer].Selected = true;
            Console.WriteLine($"Chess piece: {chessPieces[FirstLayer,SecondLayer].Type} was selected");
        }
        else
        if(chessPieces[FirstLayer,SecondLayer]==null){
            ChessPiece temp = chessPieces[FirstLayer, SecondLayer];
            bool fckingNoKill = false;
            for (int i = 0; i < chessPieces.GetLength(0); i++)
            {
                for (int j = 0; j < chessPieces.GetLength(1); j++)
                {
                    if (chessPieces[i, j] != null && chessPieces[i, j].Selected && !fckingNoKill)
                    {
                        chessPieces[FirstLayer, SecondLayer] = chessPieces[i, j];
                        Console.WriteLine($"Chess piece{chessPieces[i,j].Type} was moved to another location");
                        chessPieces[FirstLayer,SecondLayer].Selected = false;
                        chessPieces[i, j] = null;
                        fckingNoKill = true;
                    }
                }
            }
        }
        else if (chessPieces[FirstLayer, SecondLayer] != null && chessPieces[FirstLayer, SecondLayer].Selected)
        {
            chessPieces[FirstLayer, SecondLayer].Selected = false;
            Console.WriteLine($"Chess piece: {chessPieces[FirstLayer,SecondLayer].Type} was unselected");
        }
    }

}

