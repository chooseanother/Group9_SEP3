@using Group9_SEP3_Chess.Models
@using Group9_SEP3_Chess.Data
@using System.Text.Json
@using Group9_SEP3_Chess.Json2DArrayHelp
@inject IMatchService _matchService
<div class="row">
    <div class="col">
        <div class="board">
            @for (int i = 0; i < chessPieces.GetLength(0); i++)
            {
                if (i % 2 == 0)
                {
                    for (int j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        int verticalaxis = i;
                        int horizontalaxis = j;
                        if (chessPieces[i, j] != null)
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                            else
                            {
                                <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                        }
                        else
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareWhite ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                            else
                            {
                                <BoardSquareBlack ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                        }
                    }
                }
                else
                {
                    for (int j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        int verticalaxis = i;
                        int horizontalaxis = j;
                        if (chessPieces[i, j] != null)
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                            else
                            {
                                <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                        }
                        else
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareBlack ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                            else
                            {
                                <BoardSquareWhite ClickHandler="@(() => HandleClick(verticalaxis, horizontalaxis))"/>
                            }
                        }
                    }
                }
            }
        </div>
    </div>
    <div class="col">
        <div class="UpgradePart" >
            <label>Select upgrade: </label>
            <select @bind="UpgradeSelected">
                <option>Rook</option>
                <option>Knight</option>
                <option>Bishop</option>
                <option>Queen</option>
            </select>

            <button class="btn btn-outline-dark" @onclick="UpdateChessPiece">Upgrade</button>
        </div>
        
        <div class="RemovedPiecesTable">
            <table class="table">
                <thead>
                <tr>
                    <th>Color</th>
                    <th>Type</th>
                    <th>Last Position</th>
                </tr>
                </thead>
                
                <tbody>
                @foreach (ChessPiece i in RemovedChessPieces)
                {
                    <tr>
                        <td>@i.Color</td>
                        <td>@i.Type</td>
                        <td>@i.NewPosition</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .board {
        display: grid;
        grid-template-columns: auto auto auto auto auto auto auto auto;
        grid-template-rows: auto auto auto auto auto auto auto auto;
        background-color: #da9d1d;
        padding: 10px;
        width: 680px;
        height: 680px;
    }
    .RemovedPiecesTable{
       margin-top: 20px;
    }
   
</style>

@code {
    private ChessPiece[,] chessPieces = new ChessPiece[8, 8];
    private IList<ChessPiece> RemovedChessPieces;
    String printoutArray = "";
    String UpgradeSelected = "";

    protected override async Task OnInitializedAsync()
    {
    // get match info from tier2, a new match should place pieces in default location in tier 2 not tier 1 like it is now
    // chessPieces = await InitializeNewGamePieces();
    //
    // Console.WriteLine(JsonSerializer.Serialize(chessPieces, new JsonSerializerOptions
    // {
    //     Converters = {new Array2DConverter()},
    // }));

    // 2D array of custom object serialization is not supported, need to consult with somebody
    // fixed - kim
        chessPieces = await _matchService.LoadChessPieces(new Message {Action = "Load"});
        RemovedChessPieces = _matchService.getRemovedChessPieces();
        
    }

    private async Task HandleClick(int FirstLayer, int SecondLayer)
    {
        Message message = new Message()
        {
            Data = JsonSerializer.Serialize(new Position()
            {
                HorizontalAxis = SecondLayer,
                VerticalAxis = FirstLayer
            }),
            Action = "Move"
        };
        ChessPiece selected = await _matchService.MoveChessPiece(message);
        if (selected != null)
        {
            RemovedChessPieces = _matchService.getRemovedChessPieces();
            chessPieces[FirstLayer, SecondLayer] = selected;
            Console.WriteLine($"Coordinates old: {selected.OldPosition.ToString()} Coordinates new: {chessPieces[FirstLayer, SecondLayer].NewPosition.ToString()}");
            if (chessPieces[FirstLayer, SecondLayer].OldPosition.VerticalAxis != chessPieces[FirstLayer, SecondLayer].NewPosition.VerticalAxis
                || chessPieces[FirstLayer, SecondLayer].OldPosition.HorizontalAxis != chessPieces[FirstLayer, SecondLayer].NewPosition.HorizontalAxis)
            {
                chessPieces[selected.OldPosition.VerticalAxis, selected.OldPosition.HorizontalAxis] = null;
            }
            for (int i = 0; i < chessPieces.GetLength(0); i++)
            {
                for (int j = 0; j < chessPieces.GetLength(1); j++)
                {
                    if (chessPieces[i, j] != null)
                    {
                        chessPieces[i, j].Selected = false;
                    }
                }
            }
        }
    }


    private async Task UpdateChessPiece()
    {
        Message message = new Message()
        {
            Action = "Upgrade",
            Data = UpgradeSelected
        };
        Console.WriteLine("method called");
        ChessPiece toUpdate = await _matchService.UpgradeChessPiece(message);
        chessPieces[toUpdate.OldPosition.VerticalAxis, toUpdate.OldPosition.HorizontalAxis] = toUpdate;
    }


    private async Task<ChessPiece[,]> InitializeNewGamePieces()
    {
        ChessPiece[,] piecesLocation = new ChessPiece[8, 8];

        string black = "Black";
        piecesLocation[0, 0] = new ChessPiece()
        {
            Type = "rook",
            Color = black
        };
        piecesLocation[0, 1] = new ChessPiece()
        {
            Type = "Knight",
            Color = black
        };
        piecesLocation[0, 2] = new ChessPiece()
        {
            Type = "bishop",
            Color = black
        };
        piecesLocation[0, 3] = new ChessPiece()
        {
            Type = "queen",
            Color = black
        };
        piecesLocation[0, 4] = new ChessPiece()
        {
            Type = "king",
            Color = black
        };
        piecesLocation[0, 5] = new ChessPiece()
        {
            Type = "bishop",
            Color = black
        };
        piecesLocation[0, 6] = new ChessPiece()
        {
            Type = "Knight",
            Color = black
        };
        piecesLocation[0, 7] = new ChessPiece()
        {
            Type = "rook",
            Color = black
        };

        for (int i = 0; i < piecesLocation.GetLength(1); i++)
        {
            piecesLocation[1, i] = new ChessPiece()
            {
                Type = "pawn",
                Color = black
            };
        }
        string white = "White";
        piecesLocation[7, 0] = new ChessPiece()
        {
            Type = "rook",
            Color = white
        };
        piecesLocation[7, 1] = new ChessPiece()
        {
            Type = "Knight",
            Color = white
        };
        piecesLocation[7, 2] = new ChessPiece()
        {
            Type = "bishop",
            Color = white
        };
        piecesLocation[7, 3] = new ChessPiece()
        {
            Type = "queen",
            Color = white
        };
        piecesLocation[7, 4] = new ChessPiece()
        {
            Type = "king",
            Color = white
        };
        piecesLocation[7, 5] = new ChessPiece()
        {
            Type = "bishop",
            Color = white
        };
        piecesLocation[7, 6] = new ChessPiece()
        {
            Type = "Knight",
            Color = white
        };
        piecesLocation[7, 7] = new ChessPiece()
        {
            Type = "rook",
            Color = white
        };
        for (int i = 0; i < piecesLocation.GetLength(1); i++)
        {
            piecesLocation[6, i] = new ChessPiece()
            {
                Type = "pawn",
                Color = white
            };
        }

        return piecesLocation;
    }

}