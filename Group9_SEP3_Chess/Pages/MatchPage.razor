@page "/match/{id:int}"
@using Group9_SEP3_Chess.Models
@using Group9_SEP3_Chess.Data
@using Group9_SEP3_Chess.Components
@using System.Text.Json
@using System.Timers
@using Group9_SEP3_Chess.Authentication
@inject IMatchService matchService
@inject AuthenticationStateProvider authenticationStateProvider
@if (!IsDisabled)
{
    <div class="row" style="justify-content: center">
        <p>@Counter.ToString()</p>
    </div>
    <div class="row" style="justify-content: center">
        <p>The user with color @Match.UsersTurn can make a move</p>
    </div>
}
else if (IsDisabled)
{
    <div class="row" style="justify-content: center">
        <p>@Status</p>
    </div>
}
<div class="row">
    <div class="col">
        <div class="RemovedPiecesTable">
            @if (Match.Finished)
            {
                <h4>Outcome: @Match.BlackPlayer.Outcome</h4>
            }
            @if (Match.UsersTurn.Equals("Black"))
            {
                <h4 class="participant">@Match.BlackPlayer.Username</h4>
            }
            else
            {
                <h4>@Match.BlackPlayer.Username</h4>
            }
            <h4>Black Score: @BlackScore</h4>
            <h4>White removed: </h4>
            <div class="row">
                @foreach (var chessPiece in whiteRemovedChessPieces)
                {
                    <div class="col-md-2">
                        <img style="width: 50px; height:50px " alt="@chessPiece.Color @chessPiece.Type" src="@chessPiece.GetPiece()">
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col">

        <div class="board">
            <Coordinate Type="corner" TextToDisplay=" "/>
            @for (var i = 0; i < coordinatesLetters.GetLength(0); i++)
            {
                <Coordinate Type="ends" TextToDisplay="@coordinatesLetters[i]"/>
            }
            <Coordinate Type="corner" TextToDisplay=" "/>
            @for (var i = 0; i < chessPieces.GetLength(0); i++)
            {
                <Coordinate Type="side" TextToDisplay="@coordinatesNumbers[7 - i]"/>
                if (i % 2 == 0)
                {
                    for (var j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        if (j == 0)
                        {
                        }
                        var verticalAxis = i;
                        var horizontalAxis = j;
                        if (chessPieces[i, j] != null)
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClickAsync(verticalAxis, horizontalAxis))"/>
                            }
                            else
                            {
                                <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClickAsync(verticalAxis, horizontalAxis))"/>
                            }
                        }
                        else
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareWhite ClickHandler="@(() => HandleClickAsync(verticalAxis, horizontalAxis))"/>
                            }
                            else
                            {
                                <BoardSquareBlack ClickHandler="@(() => HandleClickAsync(verticalAxis, horizontalAxis))"/>
                            }
                        }
                    }
                }
                else
                {
                    for (var j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        var verticalAxis = i;
                        var horizontalAxis = j;
                        if (chessPieces[i, j] != null)
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareBlack Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClickAsync(verticalAxis, horizontalAxis))"/>
                            }
                            else
                            {
                                <BoardSquareWhite Image="@chessPieces[i, j].GetPiece()" ClickHandler="@(() => HandleClickAsync(verticalAxis, horizontalAxis))"/>
                            }
                        }
                        else
                        {
                            if (j % 2 == 0)
                            {
                                <BoardSquareBlack ClickHandler="@(() => HandleClickAsync(verticalAxis, horizontalAxis))"/>
                            }
                            else
                            {
                                <BoardSquareWhite ClickHandler="@(() => HandleClickAsync(verticalAxis, horizontalAxis))"/>
                            }
                        }
                    }
                }
                <Coordinate Type="side" TextToDisplay="@coordinatesNumbers[7 - i]"/>
            }
            <Coordinate Type="corner" TextToDisplay=" "/>
            @for (var i = 0; i < coordinatesLetters.GetLength(0); i++)
            {
                <Coordinate Type="ends" TextToDisplay="@coordinatesLetters[i]"/>
            }
            <Coordinate Type="corner" TextToDisplay=" "/>
        </div>
    </div>
    <div class="col">

        <div class="RemovedPiecesTable">
            @if (Match.Finished)
            {
                <h4>Outcome: @Match.WhitePlayer.Outcome</h4>
            }
            @if (Match.UsersTurn.Equals("White"))
            {
                <h4 class="participant">@Match.WhitePlayer.Username</h4>
            }
            else
            {
                <h4>@Match.WhitePlayer.Username</h4>
            }
            <h4>White Score: @WhiteScore</h4>
            <h4>Black removed: </h4>
            <div class="row">
                @foreach (var chessPiece in blackRemovedChessPieces)
                {
                    <div class="col-md-2">
                        <img style="width: 50px; height:50px " alt="@chessPiece.Color @chessPiece.Type" src="@chessPiece.GetPiece()">
                    </div>
                }
            </div>
        </div>
    </div>
</div>


<div class="UpgradePart" style="text-align: center">
    <label>Select upgrade: </label>
    <select @bind="UpgradeSelected" disabled="@IsDisabled">
        <option>Rook</option>
        <option>Knight</option>
        <option>Bishop</option>
        <option>Queen</option>
    </select>
    <button class="btn btn-outline-dark" disabled="@IsDisabled" @onclick="UpgradeChessPieceAsync">Upgrade</button>
</div>

<div class="MarkMatch" style="text-align: center">
    <label>Select match outcome: </label>
    <select @bind="Outcome" disabled="@IsDisabled">
        <option value="">Clear</option>
        <option>Win</option>
        <option>Loss</option>
        @if (Match.TournamentId == 0)
        {
            <option>Draw</option>
        }
    </select>
    <button class="btn btn-outline-dark" @onclick="UpdateOutcomeAsync" disabled="@IsDisabled">Submit</button>
</div>

<div id="moveHistory">
    <MoveHistory id="@Id"></MoveHistory>
</div>


@code {
    private ChessPiece[,] chessPieces = new ChessPiece[8, 8];
    private IList<ChessPiece> blackRemovedChessPieces;
    private IList<ChessPiece> whiteRemovedChessPieces;
    private string UpgradeSelected { get; set; }
    private string WhiteScore { get; set; }
    private string BlackScore { get; set; }
    private string Outcome { get; set; }
    private string Status { get; set; }
    private Match Match { get; set; }
    private readonly string[] coordinatesLetters = {"A", "B", "C", "D", "E", "F", "G", "H"};
    private readonly string[] coordinatesNumbers = {"1", "2", "3", "4", "5", "6", "7", "8"};
    private bool IsDisabled { get; set; }
    private CountdownDisplay Counter { get; set; }
    private static Timer _aTimer;

    [Parameter]
    public int Id { get; set; }

    private User loggedIn;

    protected override async Task OnInitializedAsync()
    {
        loggedIn = ((CustomAuthenticationStateProvider) authenticationStateProvider).GetCachedUser();
        chessPieces = await matchService.LoadChessPiecesAsync(new Message {Action = "Load", DataSlot2 = "" + Id});
        whiteRemovedChessPieces = matchService.GetWhiteRemovedChessPieces();
        blackRemovedChessPieces = matchService.GetBlackRemovedChessPieces();
        BlackScore = matchService.GetMatchScores(true);
        WhiteScore = matchService.GetMatchScores(false);
        Match = await matchService.GetMatchAsync(Id);
        IsDisabled = Match.Finished;
        Status = "";
        if (IsDisabled)
        {
            Status = "Match is finished";
        }
        Counter = new CountdownDisplay(Match);
        if (!IsDisabled)
        {
            StartTimer();
        }
    }

    private void StartTimer()
    {
        _aTimer = new Timer(1000);
        _aTimer.Elapsed += CountDownTimer;
        _aTimer.Enabled = true;
    }

    private void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (Counter.TimeLeft > 0)
        {
            Counter.Decrement();
        }
        else
        {
            _aTimer.Enabled = false;
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task UpdateOutcomeAsync()
    {
        if (Match.Finished)
        {
            return;
        }
        await matchService.UpdateOutcomeAsync(loggedIn.Username, Outcome, Id);
    }

    private async Task HandleClickAsync(int firstLayer, int secondLayer)
    {
        if (Match.Finished)
        {
            return;
        }
        ChessPiece selected = null;
        for (int i = 0; i < chessPieces.GetLength(0); i++)
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                if (chessPieces[i, j] != null && chessPieces[i, j].Selected && selected == null)
                {
                    selected = chessPieces[i, j];
                    if (selected.NewPosition == null)
                    {
                        selected.OldPosition = new Position()
                        {
                            VerticalAxis = i,
                            HorizontalAxis = j
                        };
                        selected.NewPosition = new Position()
                        {
                            VerticalAxis = firstLayer,
                            HorizontalAxis = secondLayer
                        };
                    }
                    else
                    {
                        selected.OldPosition = chessPieces[i, j].NewPosition;
                        selected.NewPosition = new Position()
                        {
                            VerticalAxis = firstLayer,
                            HorizontalAxis = secondLayer
                        };
                    }
                }
            }
        }
        if (chessPieces[firstLayer, secondLayer] != null)
        {
            chessPieces[firstLayer, secondLayer].Selected = true;
            Console.WriteLine($"Selected {chessPieces[firstLayer, secondLayer].Type} {chessPieces[firstLayer, secondLayer].Color}");
        }
        if (selected != null && selected.OldPosition.VerticalAxis == firstLayer && selected.OldPosition.HorizontalAxis == secondLayer)
        {
            chessPieces[firstLayer, secondLayer].Selected = false;
            Console.WriteLine($"Deselected{selected.Type} {selected.Color}");
            selected = null;
        }
        if (selected != null)
        {
            Message message = new Message()
            {
                Data = JsonSerializer.Serialize(selected),
                DataSlot2 = $"{Id}",
                DataSlot3 = loggedIn.Username,
                Action = "Move"
            };
            ChessPiece moved = await matchService.MoveChessPieceAsync(message);
    //Console.WriteLine($"moved to{FirstLayer} {SecondLayer}");
            if (moved != null)
            {
                Console.WriteLine($"Chess piece moved: {moved.Color} {moved.Type} {moved.OldPosition} {moved.NewPosition}");
                whiteRemovedChessPieces = matchService.GetWhiteRemovedChessPieces();
                blackRemovedChessPieces = matchService.GetBlackRemovedChessPieces();
                BlackScore = matchService.GetMatchScores(true);
                WhiteScore = matchService.GetMatchScores(false);
                chessPieces[firstLayer, secondLayer] = moved;
                if (chessPieces[firstLayer, secondLayer].OldPosition.VerticalAxis != chessPieces[firstLayer, secondLayer].NewPosition.VerticalAxis
                    || chessPieces[firstLayer, secondLayer].OldPosition.HorizontalAxis != chessPieces[firstLayer, secondLayer].NewPosition.HorizontalAxis)
                {
                    chessPieces[moved.OldPosition.VerticalAxis, moved.OldPosition.HorizontalAxis] = null;
                }
                for (int i = 0; i < chessPieces.GetLength(0); i++)
                {
                    for (int j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        if (chessPieces[i, j] != null)
                        {
                            chessPieces[i, j].Selected = false;
                        }
                    }
                }
            }
            else
            {
                chessPieces[selected.OldPosition.VerticalAxis, selected.OldPosition.HorizontalAxis].NewPosition = selected.OldPosition;
                Console.WriteLine("Deselecting all pieces");
                for (int i = 0; i < chessPieces.GetLength(0); i++)
                {
                    for (int j = 0; j < chessPieces.GetLength(1); j++)
                    {
                        if (chessPieces[i, j] != null)
                        {
                            chessPieces[i, j].Selected = false;
                        }
                    }
                }
            }
        }
    }

    private async Task UpgradeChessPieceAsync()
    {
        if (Match.Finished)
        {
            return;
        }
        ChessPiece selected = null;
        for (int i = 0; i < chessPieces.GetLength(0); i++)
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                if (chessPieces[i, j] != null && chessPieces[i, j].Selected)
                {
                    selected = chessPieces[i, j];
                    selected.Selected = false;
                    selected.OldPosition = new Position()
                    {
                        VerticalAxis = i,
                        HorizontalAxis = j
                    };
                    selected.NewPosition = new Position()
                    {
                        VerticalAxis = i,
                        HorizontalAxis = j
                    };
                }
            }
        }

        Message message = new Message()
        {
            Action = "Upgrade",
            Data = UpgradeSelected,
            DataSlot2 = $"{Id}",
            DataSlot3 = JsonSerializer.Serialize(selected),
            DataSlot4 = loggedIn.Username
        };
        ChessPiece toUpdate = await matchService.UpgradeChessPieceAsync(message);
        if (toUpdate != null)
        {
            chessPieces[toUpdate.OldPosition.VerticalAxis, toUpdate.OldPosition.HorizontalAxis] = toUpdate;
        }
    }

}