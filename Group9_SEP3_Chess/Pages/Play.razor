@page "/play"
@using Group9_SEP3_Chess.Models
@using Group9_SEP3_Chess.Data
@inject AuthenticationStateProvider authenticationStateProvider;

@inject IPlayMatch _playMatch

<h3>Challenge User</h3>
<div>
    <EditForm Model="@newChallenge" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            Select turn length:<br/>
            <InputSelect @bind-Value="newChallenge.TurnLength">
                <option></option>
                @foreach (var (key, value) in turnLengths)
                {
                    <option value="@key">@value</option>
                }
            </InputSelect>
        </div>
        <div style="display: flex;align-items: center">
            <div class="form-group">
                User to challenge:<br/>
                <InputText @bind-Value="newChallenge.Username"/>
            </div>
            @if (showError)
            {
                <p style="color:@errorColor;margin: 0 10px;">@_errorMessage</p>
            }
        </div>
        <p class="actions">
            <button class="btn btn-dark" type="submit">Challenge</button>
        </p>
    </EditForm>
</div>

@code {
    private string Username { get; set; }

    private string _errorMessage;
    private string errorColor;
    
    private readonly IDictionary<int, string> turnLengths = new Dictionary<int, string>
    {
        {120,"2 Minutes"}, {1800,"30 Minutes"}, {3600,"1 Hour"}, {7200,"2 Hours"}, {36000,"10 Hours"}, {86400,"1 Day"}, {259200,"3 Days"}, {604800,"7 Days"}
    };
    
    private Challenge newChallenge = new();

    private bool showError;

    protected override void OnInitialized()
    {
        // load username from currently logged in user
        // Username = loggedInUser.Username
        Username = ((CustomAuthenticationStateProvider) authenticationStateProvider).GetCachedUser().Username;
    }
    
    private async Task HandleValidSubmit()
    {
        showError = false;
        newChallenge.Challenger = Username;

        var result = await _playMatch.ChallengeUser(newChallenge);

        errorColor = result.Contains("Failed") ? "red" : "green";
        showError = true;
        _errorMessage = result;
    }
    
    private void HandleInvalidSubmit()
    {
        
    }
}