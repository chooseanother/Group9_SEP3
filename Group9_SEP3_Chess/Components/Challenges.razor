@using Group9_SEP3_Chess.Models
@using Group9_SEP3_Chess.Data
@using Group9_SEP3_Chess.Authentication
@inject AuthenticationStateProvider authenticationStateProvider;
@inject IChallenge challenge


@if (challenges == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!challenges.Any())
{
    <p>
        <em>No Challenges</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Challenger</th>
            @* <th>Challenged</th> *@
            <th>Turn Time</th>
            <th>Accept</th>
            <th>Decline</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var c in challenges)
        {
            <tr>
                <td>@c.Challenger</td>
                @* <td>@c.Username</td> *@
                <td>@turnLengths[c.TurnLength]</td>
                <td>
                    <button class="btn btn-outline-dark" @onclick='() => AcceptChallenge(c)'>
                        <i class="oi oi-check" style="color:green;"></i>
                    </button>
                </td>
                <td>
                    <button class="btn btn-outline-dark" @onclick='() => RejectChallenge(c)'>
                        <i class="oi oi-trash" style="color:red;"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string? Username { get; set; }
    
    private readonly IDictionary<int, string> turnLengths = new Dictionary<int, string>
    {
        {120,"2 Minutes"}, {1800,"30 Minutes"}, {3600,"1 Hour"}, {7200,"2 Hours"}, {36000,"10 Hours"}, {86400,"1 Day"}, {259200,"3 Days"}, {604800,"7 Days"}
    };
    
    private IList<Challenge> challenges;

    protected override async Task OnInitializedAsync()
    {
        Username = ((CustomAuthenticationStateProvider) authenticationStateProvider).GetCachedUser().Username;
        challenges = await challenge.GetChallenges(Username);
        // await Task.Delay(100);
    }

    private async Task AcceptChallenge(Challenge challenge)
    {
        var result = await this.challenge.AcceptChallenge(challenge);
        if (result)
        {
            challenges.Remove(challenge);
        }
        
    // await OnInitializedAsync();
    // go to match created from accepting the challenge
    }

    private async Task RejectChallenge(Challenge challenge)
    {
        var result = await this.challenge.DeclineChallenge(challenge);
        if (result)
        {
            challenges.Remove(challenge);
        }
        
            // StateHasChanged.Invoke();
            // await OnInitializedAsync();
    }
}