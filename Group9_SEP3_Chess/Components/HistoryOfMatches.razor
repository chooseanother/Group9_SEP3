@page "/HistoryOfMatches"
@using Group9_SEP3_Chess.Data
@using Group9_SEP3_Chess.Models
@using System.Text.Json
@inject IMatchService matchService;
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager _navigationManager

@if (matches == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!matches.Any())
{
    <p>
        <em>No matches in the system. </em>
    </p>
}
else
{
    <table>
        <thead>
        <th>Match ID</th>
        <th>Tournament ID</th>
        <th>Opponent</th>
        <th>Length of turn</th>
        <th>Date</th>
        </thead>
        @foreach (var item in matches)
        {
            <tr>
                <td>@item.MatchID</td>
                @if (item.TournamentID == 0)
                {
                    <td></td>
                }
                else
                {
                    <td>@item.TournamentID</td>
                }
                @if (item.WhitePlayer.Username.Equals(loggedInUser.Username))
                {
                    <td>@item.BlackPlayer.Username</td>
                }
                else
                {
                    <td>@item.WhitePlayer.Username</td>
                }
                <td>@item.TurnTime</td>
                <td>@item.LatestMove</td>
                <td>
                    <button class="moi btn-outline-dark" @onclick="@(() => ViewMatch(item.MatchID))">View</button>
                </td>
            </tr>
        }
    </table>
}

@code {
    private IList<Match> matches;
    private User loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = ((CustomAuthenticationStateProvider) authenticationStateProvider).GetCachedUser();
        matches = await matchService.GetFinishedMatches(loggedInUser.Username);
    }

    private void ViewMatch(int MatchID)
    {
        _navigationManager.NavigateTo($"/MatchHistory/{MatchID}");
    }

}