@using Group9_SEP3_Chess.Models
@using Group9_SEP3_Chess.Data
@using Group9_SEP3_Chess.Authentication
@using Microsoft.VisualBasic.CompilerServices
@inject AuthenticationStateProvider customAuthenticationStateProvider;
@inject ITournament tournament;


<div>
    <div class="HostTournament">
        <EditForm Model="@newTournament" OnValidSubmit="@CreateTournament">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="form-group">
                <h4>Host Tournament</h4>
                Select turn length:
                <br/>
                <InputSelect @bind-Value="newTournament.TurnTime">
                    @foreach (var (key, value) in turnLengths)
                    {
                        <option value="@key">@value</option>
                    }
                </InputSelect>
                <br/>

                Nr of Participants:
                <InputSelect @bind-Value="newTournament.NrOfParticipants" style="margin-top: 19px">
                    <option>4</option>
                    <option>8</option>
                    <option>16</option>
                    <option>32</option>
                </InputSelect>

                <p style="margin-top: 10px;margin-bottom: 60px;" class="actions">
                    <button class="btn btn-outline-dark" type="submit">Create</button>
                </p>
            </div>
        </EditForm>
    </div>

    <div class="JoinTournament">
        <form>

            <h4>Join Tournament</h4>
            Tournament ID:
            <br/>
            <input type="number" @bind-value="TournamentsIdInserted" required>
        </form>
        <button class="btn btn-outline-dark" style="margin-top: 2rem" @onclick="JoinATournament">Join</button>
    </div>
    
    <em>@Notification</em>

</div>


<style>
.HostTournament{margin-top: 5rem; margin-bottom: 5rem;}
    
</style>


@code {
    private Tournament newTournament = new()
    {
        NrOfParticipants = 4,
        TurnTime = 120
    };

    private string Notification { get; set; }
    private int TournamentsIdInserted { get; set; }
    private string CurrentUser { get; set; }

    private readonly IDictionary<int, string> turnLengths = new Dictionary<int, string>
    {
        {120, "2 Minutes"}, {1800, "30 Minutes"}, {3600, "1 Hour"}, {7200, "2 Hours"}, {36000, "10 Hours"}, {86400, "1 Day"}, {259200, "3 Days"}, {604800, "7 Days"}
    };
    
    protected override void OnInitialized()
    {
        CurrentUser = ((CustomAuthenticationStateProvider) customAuthenticationStateProvider).GetCachedUser().Username;
    }

    private async Task CreateTournament()
    {
        newTournament.Creator = CurrentUser;
        
        var result = await tournament.CreateTournamentAsync(newTournament);
        if (!result.Equals("0"))
        {
            Notification = "Tournament created, Id: " + result;
        }
        else
        {
            Notification = "Tournament can not be created";
        }

    }

    private async Task JoinATournament()
    {
        var result = await tournament.JoinATournamentAsync(CurrentUser, TournamentsIdInserted);

        if (result)
        {
            Notification = $"The tournament with ID: {TournamentsIdInserted}, was joined successfully";
        }
        else
        {
            Notification = $"The tournament with ID: {TournamentsIdInserted} can not be joined";
        }
    }

}