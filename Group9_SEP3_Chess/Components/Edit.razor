@using Microsoft.AspNetCore.Components
@using Group9_SEP3_Chess.Models
@using Group9_SEP3_Chess.Data
@inject AuthenticationStateProvider authenticationStateProvider;
@inject IUserService userService;

<link href="Edit.css" rel="stylesheet">
@if (UserToEdit == null)
{
    <em>@errorMessage</em>
}
else
{
    <EditForm Model="@UserToEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator/> <ValidationSummary/>
        <div> Username: <br/> @UserToEdit.Username</div>
        <div class="form-group" > New password:<br/> <InputText class="input" type="password" disabled="@isDisabled" @bind-Value="@newPassword" @oninput="ConfirmationSetterPassword"></InputText></div>
        <InputText class="input" type="password" hidden="true" disabled="@isDisabled" @bind-Value="UserToEdit.ConfirmPassword" ></InputText>
        <div class="form-group" > New email:<br/> <InputText class="input" disabled="@isDisabled" @bind-Value="UserToEdit.Email" @oninput="ConfirmationSetterEmail" ></InputText></div>
        <InputText class="input" hidden="true" @bind-Value="UserToEdit.ConfirmEmail"></InputText>
        <div><button class="btn btn-outline-dark" type="button" @onclick="@onDisabled">Edit </button>
            <p class="actions">
                <button class="btn btn-outline-dark" type="submit">Save</button>
            </p></div>
        <div id="scorePoints"> Score points: <br/> @UserToEdit.ScorePoints</div>
        <div> Wins: <br/> @UserToEdit.Wins</div>
        <div> Losses: <br/> @UserToEdit.Losses</div>
        <div> Draws: <br/> @UserToEdit.Draws</div>
        <div> Games played: <br/> @UserToEdit.GamesPlayed</div>
    </EditForm>
}

@code {
    private User UserToEdit;
    
    private string newPassword;

    private bool isDisabled { get; set; }

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        UserToEdit = ((CustomAuthenticationStateProvider) authenticationStateProvider).GetCachedUser();
        UserToEdit.ConfirmPassword = UserToEdit.Password;
        UserToEdit.ConfirmEmail = UserToEdit.Email;
        isDisabled = true;
    }
    
    private async Task Save()
    {
        await userService.UpdateUser(UserToEdit);
    }
    
    private void ConfirmationSetterPassword(ChangeEventArgs args)
    {
        UserToEdit.Password = args.Value.ToString();
        UserToEdit.ConfirmPassword = args.Value.ToString();
    }
    
    private void ConfirmationSetterEmail(ChangeEventArgs args)
    {
        UserToEdit.ConfirmEmail = args.Value.ToString();
    }

    private async Task onDisabled()
    {
        if (isDisabled)
        {
            isDisabled = false;
        }
        else
        {
            isDisabled = true;  
        }
    }

}