@using Group9_SEP3_Chess.Data
@using Group9_SEP3_Chess.Authentication
@namespace Group9_SEP3_Chess.Components
@inject NavigationManager nvgManager;
@inject IUserService userService;
@inject AuthenticationStateProvider authenticationStateProvider;

<AuthorizeView>
    <NotAuthorized>
        <div class="login">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="userName"/>
        </div>
        <div class="login">
            <label id="pass">Password:</label>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color:red">@errorMessage</div>
        <button id="btn1"class="btn btn-outline-dark" type="submit" @onclick="PerformLoginAsync">Login</button>
    </NotAuthorized>
    <Authorized>
        <button id="btn1"class="btn btn-outline-dark" type="submit" @onclick="EnterAccount">Account</button>
        <button id="btn1"class="btn btn-outline-dark" type="submit" @onclick="PerformLogoutAsync">Logout</button>
    </Authorized>
</AuthorizeView>


@code {
    private string userName;
    private string password;
    private string errorMessage;

    private async Task PerformLoginAsync()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider) authenticationStateProvider).ValidateLogin(userName, password);
            nvgManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private void PerformLogoutAsync()
    {
        errorMessage = "";
        userName = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider) authenticationStateProvider).Logout();
            nvgManager.NavigateTo("/");
        }
        catch (Exception e)
        {
        }
    }

    private void EnterAccount()
    {
        nvgManager.NavigateTo("/");
    }


}