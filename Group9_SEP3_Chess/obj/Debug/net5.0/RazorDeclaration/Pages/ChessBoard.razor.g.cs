// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Group9_SEP3_Chess.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Group9_SEP3_Chess;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\_Imports.razor"
using Group9_SEP3_Chess.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\Pages\ChessBoard.razor"
using Group9_SEP3_Chess.Models;

#line default
#line hidden
#nullable disable
    public partial class ChessBoard : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 93 "D:\CSharp\Group9_SEP3\Group9_SEP3_Chess\Pages\ChessBoard.razor"
       
    private String[] letters = new String[8] {"a", "b", "c", "d", "e", "f", "g", "h"};
    private ChessPiece[,] chessPieces = new ChessPiece[8, 8];
    String printoutArray = "";
    String UpgradeSelected = "";

    protected override async Task OnInitializedAsync()
    {
        chessPieces[0, 0] = new ChessPiece()
        {
            Type = "black-rook"
        };
        chessPieces[0, 1] = new ChessPiece()
        {
            Type = "black-horse"
        };
        chessPieces[0, 2] = new ChessPiece()
        {
            Type = "black-bishop"
        };
        chessPieces[0, 3] = new ChessPiece()
        {
            Type = "black-queen"
        };
        chessPieces[0, 4] = new ChessPiece()
        {
            Type = "black-king"
        };
        chessPieces[0, 5] = new ChessPiece()
        {
            Type = "black-bishop"
        };
        chessPieces[0, 6] = new ChessPiece()
        {
            Type = "black-horse"
        };
        chessPieces[0, 7] = new ChessPiece()
        {
            Type = "black-rook"
        };

        for (int i = 0; i < chessPieces.GetLength(1); i++)
        {
            chessPieces[1, i] = new ChessPiece()
            {
                Type = "black-pawn"
            };
        }
        chessPieces[7, 0] = new ChessPiece()
        {
            Type = "white-rook"
        };
        chessPieces[7, 1] = new ChessPiece()
        {
            Type = "white-horse"
        };
        chessPieces[7, 2] = new ChessPiece()
        {
            Type = "white-bishop"
        };
        chessPieces[7, 3] = new ChessPiece()
        {
            Type = "white-queen"
        };
        chessPieces[7, 4] = new ChessPiece()
        {
            Type = "white-king"
        };
        chessPieces[7, 5] = new ChessPiece()
        {
            Type = "white-bishop"
        };
        chessPieces[7, 6] = new ChessPiece()
        {
            Type = "white-horse"
        };
        chessPieces[7, 7] = new ChessPiece()
        {
            Type = "white-rook"
        };
        for (int i = 0; i < chessPieces.GetLength(1); i++)
        {
            chessPieces[6, i] = new ChessPiece()
            {
                Type = "white-pawn"
            };
        }
    }

    private void HandleClick(int FirstLayer, int SecondLayer)
    {
        ChessPiece selected = null;
        
            
            for (int i = 0; i < chessPieces.GetLength(0); i++)
            {
                for (int j = 0; j < chessPieces.GetLength(1); j++)
                {
                    if (chessPieces[i, j] != null && chessPieces[i, j].Selected && selected == null)
                    {
                        if(chessPieces[i,j].NewPosition==null){
                            chessPieces[i, j].OldPosition = new Position()
                            {
                                VerticalAxis = i,
                                HorizontalAxis = j
                            };
                        }
                        else
                        {
                            chessPieces[i, j].OldPosition = chessPieces[i, j].NewPosition;
                        }
                        selected = chessPieces[i, j];
                        Console.WriteLine($"Chess piece:{selected.Type} was found to be selected");
                    }
                }
            }
        
            if (chessPieces[FirstLayer, SecondLayer] != null)
            {
                chessPieces[FirstLayer, SecondLayer].Selected = true;
                Console.WriteLine($"Chess piece:{chessPieces[FirstLayer,SecondLayer].Type} was selected");
            }
        Console.WriteLine("Here");
        if (selected != null)
        {
            chessPieces[FirstLayer, SecondLayer] = selected;
            chessPieces[FirstLayer, SecondLayer].NewPosition = new Position()
            {
                VerticalAxis = FirstLayer,
                HorizontalAxis = SecondLayer
            };
            Console.WriteLine($"Coordinates old: {selected.OldPosition.ToString()} Coordinates new: {chessPieces[FirstLayer,SecondLayer].NewPosition.ToString()}");
            if(selected.OldPosition.VerticalAxis!=chessPieces[FirstLayer,SecondLayer].NewPosition.VerticalAxis ||
               selected.OldPosition.HorizontalAxis!=chessPieces[FirstLayer,SecondLayer].NewPosition.HorizontalAxis){
                chessPieces[selected.OldPosition.VerticalAxis, selected.OldPosition.HorizontalAxis] = null;
            }
            for (int i = 0; i < chessPieces.GetLength(0); i++)
            {
                for (int j = 0; j < chessPieces.GetLength(1); j++)
                {
                    if(chessPieces[i,j]!=null){
                        chessPieces[i, j].Selected = false;
                    }
                }
            }
        }


    }


    private void UpdateChessPiece()
    {
        
        bool NoMultipleUpgrades = false;
        
        for (int i = 0; i < chessPieces.GetLength(0); i++)
        {
            for (int j = 0; j < chessPieces.GetLength(1); j++)
            {
                if (chessPieces[i, j] != null && chessPieces[i, j].Selected && !NoMultipleUpgrades)
                {
                    if (chessPieces[i, j].Type.Contains("black"))
                    {
                        chessPieces[i, j].Type = "black-" + UpgradeSelected;
                        chessPieces[i, j].Selected = false;
                        NoMultipleUpgrades = true;
                    }
                    else
                    {
                        chessPieces[i, j].Type = "white-" + UpgradeSelected;
                        chessPieces[i, j].Selected = false;
                        NoMultipleUpgrades = true;
                    }
                    
                }
            }
        }
        
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
